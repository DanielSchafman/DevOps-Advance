#cron:
* * * * *

pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')  // You must configure your Docker Hub credentials in Jenkins
        DOCKER_IMAGE = "danielschafman/advance_project"
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/DanielSchafman/DevOps-Advance.git'
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''#!/bin/bash
                python3 -m venv my_venv &&
                source /var/jenkins_home/workspace/advance_project_ci/my_venv/bin/activate &&
                pip3 install -r /var/jenkins_home/workspace/advance_project_ci/requierments.txt
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                sh '''#!/bin/bash
                source /var/jenkins_home/workspace/advance_project_ci/my_venv/bin/activate &&
                python3 frontend_testing.py &&
                python3 backend_testing.py
                '''
            }
        }
        
        stage('Containerize') {
            steps {
                script {
                    // Build Docker image
                    sh "docker build -t ${DOCKER_IMAGE}:latest ."
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub and push the image
                    sh """
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                sh '''#!/bin/bash
                source /var/jenkins_home/workspace/advance_project_ci/my_venv/bin/activate &&
                python3 clean_environment.py
                '''
            }
        }
    }
    
    post {
        always {
            cleanWs() // Cleanup workspace after pipeline completion
        }
    }
}